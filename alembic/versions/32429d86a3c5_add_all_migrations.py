"""add all migrations

Revision ID: 32429d86a3c5
Revises: b1c2d3e4f6a7
Create Date: 2025-08-25 12:42:26.953631

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '32429d86a3c5'
down_revision: Union[str, None] = 'b1c2d3e4f6a7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('assessment_score_history',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('assessment_id', sa.String(), nullable=False),
    sa.Column('apprentice_id', sa.String(), nullable=False),
    sa.Column('scored_at', sa.DateTime(), nullable=False),
    sa.Column('score_data', sa.JSON(), nullable=False),
    sa.Column('model_used', sa.String(), nullable=False),
    sa.Column('triggered_by', sa.String(), nullable=False),
    sa.Column('triggered_by_user_id', sa.String(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['apprentice_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['assessment_id'], ['assessments.id'], ),
    sa.ForeignKeyConstraint(['triggered_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('assessments', sa.Column('template_id', sa.String(), nullable=True))
    op.alter_column('assessments', 'answers',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.create_foreign_key(None, 'assessments', 'assessment_templates', ['template_id'], ['id'])
    # Guard ALTERs in case the referenced tables were not created on this
    # migration path (some revisions were merged). Use PostgreSQL to_regclass
    # to detect table existence at runtime and skip if missing.
    conn = op.get_bind()
    if conn.execute(sa.text("SELECT to_regclass('public.mentor_notes')")).scalar() is not None:
        op.alter_column('mentor_notes', 'is_private',
                   existing_type=sa.BOOLEAN(),
                   nullable=True,
                   existing_server_default=sa.text('true'))
        op.alter_column('mentor_notes', 'created_at',
                   existing_type=postgresql.TIMESTAMP(),
                   nullable=True,
                   existing_server_default=sa.text('now()'))

    if conn.execute(sa.text("SELECT to_regclass('public.notifications')")).scalar() is not None:
        op.alter_column('notifications', 'is_read',
                   existing_type=sa.BOOLEAN(),
                   nullable=True,
                   existing_server_default=sa.text('false'))
        op.alter_column('notifications', 'created_at',
                   existing_type=postgresql.TIMESTAMP(),
                   nullable=True,
                   existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('notifications', 'is_read',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('mentor_notes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('mentor_notes', 'is_private',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.drop_constraint(None, 'assessments', type_='foreignkey')
    op.alter_column('assessments', 'answers',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False)
    op.drop_column('assessments', 'template_id')
    op.drop_table('assessment_score_history')
    # ### end Alembic commands ###
